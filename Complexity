# Review02

一、复杂度
     1、是粗略衡量算法好坏的刻度尺（工具）
     2、从两个维度去衡量复杂度
             快慢            ——   时间复杂度（重点掌握）
            使用空间的情况    ——   空间复杂度
二、时间复杂度
     1、直接利用时间衡量不现实，测试环境多变，不好控制变量
     2、前提1：如果指定CPU的情况下，单位时间内运行的基本指令个数是固定的。
              如果一个算法需要的指令比另一个算法需要的指令个数小，就可以推出算法A的运行时间更快  

        前提2：算法计算的快慢和输入数据的规模是有关系的
     3、粗略计算算法的快慢 
            n：数据的规模
            f(n)：n 的数据规模情况下，需要的大概基本指令个数

     4、引入 大 O 渐进表示法来计算算法的快慢
         O(f(n))
        （1）只保留最高次项
        （2）保留的最高次项系数化为1
     5、算法的快慢还存在最好的情况、平均的情况、最坏的情况
        算法的时间复杂度 ：一般优先关注最坏情况，其次是平均情况，最好情况关注比较少。
      【举例1】：二分查找算法的时间复杂度：log(2^n)

      【举例2】：递归方法的时间复杂度 //时间复杂度为O（2^n）
           （画调用栈）
             Long Fibonacci(int N){
       Return N<2? N: Fibonacci(N-1)+Fibonacci(N-2);
       递归方法的调用栈往往是占用空间复杂度比较多的地方

     6、常见的时间复杂度
         O(1)    O(log(n))    O(n)    O(n*log(n))    O(n^2)
         特别慢的O（2^n）是基本不可行的时间复杂度
三、空间复杂度:
      O(F(n))   在n输入规模的情况下，算法需要的最大的空间情况,,用到的额外的空间
    （1）开辟数组
    （2）调用栈（递归方法）
